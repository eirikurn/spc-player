// prettier-ignore
const CYCLES_PER_OPCODE = new Uint8Array([
//  01    23    45    67    89    AB    CD    EF
  0x28, 0x47, 0x34, 0x36, 0x26, 0x54, 0x54, 0x68, // 0
  0x48, 0x47, 0x45, 0x56, 0x55, 0x65, 0x22, 0x46, // 1
  0x28, 0x47, 0x34, 0x36, 0x26, 0x54, 0x54, 0x74, // 2
  0x48, 0x47, 0x45, 0x56, 0x55, 0x65, 0x22, 0x38, // 3
  0x28, 0x47, 0x34, 0x36, 0x26, 0x44, 0x54, 0x66, // 4
  0x48, 0x47, 0x45, 0x56, 0x55, 0x45, 0x22, 0x43, // 5
  0x28, 0x47, 0x34, 0x36, 0x26, 0x44, 0x54, 0x75, // 6
  0x48, 0x47, 0x45, 0x56, 0x55, 0x55, 0x22, 0x36, // 7
  0x28, 0x47, 0x34, 0x36, 0x26, 0x54, 0x52, 0x45, // 8
  0x48, 0x47, 0x45, 0x56, 0x55, 0x55, 0x22, 0xC5, // 9
  0x38, 0x47, 0x34, 0x36, 0x26, 0x44, 0x52, 0x44, // A
  0x48, 0x47, 0x45, 0x56, 0x55, 0x55, 0x22, 0x34, // B
  0x38, 0x47, 0x45, 0x47, 0x25, 0x64, 0x52, 0x49, // C
  0x48, 0x47, 0x56, 0x67, 0x45, 0x55, 0x22, 0x83, // D
  0x28, 0x47, 0x34, 0x36, 0x24, 0x53, 0x43, 0x40, // E
  0x48, 0x47, 0x45, 0x56, 0x34, 0x54, 0x22, 0x60, // F
]);

export const cyclesPerOpcode = (opcode: number) => {
  const slot = (opcode / 2) >> 0;
  const value = CYCLES_PER_OPCODE[slot];
  if (opcode % 2 === 0) {
    return value >> 4;
  } else {
    return value & 0x0f;
  }
};

// prettier-ignore
const BYTES_PER_OPCODE = new Uint8Array([
//  01    23    45    67    89    AB    CD    EF
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x31, 0x31, // 0
  0x21, 0x23, 0x23, 0x32, 0x31, 0x22, 0x11, 0x33, // 1
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x31, 0x32, // 2
  0x21, 0x23, 0x23, 0x32, 0x31, 0x22, 0x11, 0x23, // 3
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x31, 0x32, // 4
  0x21, 0x23, 0x23, 0x32, 0x31, 0x22, 0x11, 0x33, // 5
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x31, 0x31, // 6
  0x21, 0x23, 0x23, 0x32, 0x31, 0x22, 0x11, 0x21, // 7
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x32, 0x13, // 8
  0x21, 0x23, 0x23, 0x32, 0x31, 0x22, 0x11, 0x11, // 9
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x32, 0x11, // A
  0x21, 0x23, 0x23, 0x32, 0x31, 0x22, 0x11, 0x11, // B
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x32, 0x11, // C
  0x21, 0x23, 0x23, 0x32, 0x22, 0x22, 0x11, 0x31, // D
  0x11, 0x23, 0x23, 0x12, 0x23, 0x32, 0x31, 0x11, // E
  0x21, 0x23, 0x23, 0x32, 0x22, 0x32, 0x11, 0x31, // F
]);

export const bytesPerOpcode = (opcode: number) => {
  const slot = (opcode / 2) >> 0;
  const value = BYTES_PER_OPCODE[slot];
  if (opcode % 2 === 0) {
    return value >> 4;
  } else {
    return value & 0x0f;
  }
};
